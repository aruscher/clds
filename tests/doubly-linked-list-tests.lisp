(in-package #:clds-tests)

(def-suite doubly-linked-list-tests
  :in clds-tests)

(in-suite doubly-linked-list-tests)

(test dlist-add-element-at-test
  (let ((dl (make-dlist)))
    (is (dlist-empty-p dl))
    (is (= (dlist-size dl) 0))
    (dlist-add-element-at dl 1 0)
    (is (not (dlist-empty-p dl)))
    (is (= (dlist-size dl) 1))
    (is (equal (dlist-get-elements dl) '(1)))
    (is (= (dlist-get-element-at dl 0) 1)))
  (let ((dl (make-dlist)))
    (dlist-add-element-at dl 2 0)
    (dlist-add-element-at dl 1 0)
    (is (equal (dlist-get-elements dl) '(1 2)))
    (dlist-add-element-at dl 3 1)
    (is (equal (dlist-get-elements dl) '(1 3 2)))
    (dlist-add-element-at dl 4 1)
    (is (equal (dlist-get-elements dl) '(1 4 3 2)))
    (is (= (dlist-size dl) 4)))
  (let ((dl (make-dlist)))
    (signals error (dlist-add-element-at dl 42 2))
    (signals error (dlist-add-element-at dl 42 -1))))

(test dlist-add-element-front-test
  (let ((dl (make-dlist)))
    (dlist-add-element-front dl 1)
    (is (equal (dlist-get-elements dl) '(1)))
    (is (= (dlist-size dl) 1))
    (dlist-add-element-front dl 2)
    (is (equal (dlist-get-elements dl) '(2 1)))
    (is (= (dlist-size dl) 2))
    (dlist-add-element-front dl 3)
    (is (equal (dlist-get-elements dl) '(3 2 1)))))

(test dlist-add-element-end-test
  (let ((dl (make-dlist)))
    (dlist-add-element-end dl 1)
    (is (equal (dlist-get-elements dl) '(1)))
    (is (= (dlist-size dl) 1))
    (dlist-add-element-end dl 2)
    (is (equal (dlist-get-elements dl) '(1 2)))
    (is (= (dlist-size dl) 2))
    (dlist-add-element-end dl 3)
    (is (equal (dlist-get-elements dl) '(1 2 3)))))
